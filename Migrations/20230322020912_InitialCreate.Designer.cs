// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicSystem.Data;

#nullable disable

namespace MusicSystem.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20230322020912_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicSystem.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("MusicSystem.Models.EpisodeArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeArtist");
                });

            modelBuilder.Entity("MusicSystem.Models.ListenerList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ListenerList");
                });

            modelBuilder.Entity("MusicSystem.Models.ListenerListPodcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ListenerListId")
                        .HasColumnType("int");

                    b.Property<int>("PodcastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListenerListId");

                    b.HasIndex("PodcastId");

                    b.ToTable("ListenerListPodcast");
                });

            modelBuilder.Entity("MusicSystem.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("MediaCollectionId")
                        .HasColumnType("int");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Media");

                    b.HasDiscriminator<string>("MediaType").HasValue("Media");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MusicSystem.Models.MediaCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MediaCollectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MediaCollection");

                    b.HasDiscriminator<string>("MediaCollectionType").HasValue("MediaCollection");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MusicSystem.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("MusicSystem.Models.PlaylistSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSong");
                });

            modelBuilder.Entity("MusicSystem.Models.PodcastArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("PodcastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastArtist");
                });

            modelBuilder.Entity("MusicSystem.Models.SongContributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("SongContributor");
                });

            modelBuilder.Entity("MusicSystem.Models.Episode", b =>
                {
                    b.HasBaseType("MusicSystem.Models.Media");

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("MediaCollectionId");

                    b.HasDiscriminator().HasValue("Episode");
                });

            modelBuilder.Entity("MusicSystem.Models.Song", b =>
                {
                    b.HasBaseType("MusicSystem.Models.Media");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("int");

                    b.HasIndex("MediaCollectionId");

                    b.HasDiscriminator().HasValue("Song");
                });

            modelBuilder.Entity("MusicSystem.Models.Album", b =>
                {
                    b.HasBaseType("MusicSystem.Models.MediaCollection");

                    b.HasDiscriminator().HasValue("Album");
                });

            modelBuilder.Entity("MusicSystem.Models.Podcast", b =>
                {
                    b.HasBaseType("MusicSystem.Models.MediaCollection");

                    b.HasDiscriminator().HasValue("Podcast");
                });

            modelBuilder.Entity("MusicSystem.Models.EpisodeArtist", b =>
                {
                    b.HasOne("MusicSystem.Models.Artist", "Artist")
                        .WithMany("EpisodeArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSystem.Models.Episode", "Episode")
                        .WithMany("GuestArtists")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("MusicSystem.Models.ListenerListPodcast", b =>
                {
                    b.HasOne("MusicSystem.Models.ListenerList", "ListenerList")
                        .WithMany("ListenerListPodcasts")
                        .HasForeignKey("ListenerListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSystem.Models.Podcast", "Podcast")
                        .WithMany("ListenerListPodcasts")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListenerList");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("MusicSystem.Models.PlaylistSong", b =>
                {
                    b.HasOne("MusicSystem.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSystem.Models.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicSystem.Models.PodcastArtist", b =>
                {
                    b.HasOne("MusicSystem.Models.Artist", "Artist")
                        .WithMany("PodcastArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSystem.Models.Podcast", "Podcast")
                        .WithMany("MainCast")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("MusicSystem.Models.SongContributor", b =>
                {
                    b.HasOne("MusicSystem.Models.Artist", "Artist")
                        .WithMany("SongContributors")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicSystem.Models.Song", "Song")
                        .WithMany("SongContributors")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicSystem.Models.Episode", b =>
                {
                    b.HasOne("MusicSystem.Models.Podcast", "Podcast")
                        .WithMany("Episodes")
                        .HasForeignKey("MediaCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Podcast");
                });

            modelBuilder.Entity("MusicSystem.Models.Song", b =>
                {
                    b.HasOne("MusicSystem.Models.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("MediaCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MusicSystem.Models.Artist", b =>
                {
                    b.Navigation("EpisodeArtists");

                    b.Navigation("PodcastArtists");

                    b.Navigation("SongContributors");
                });

            modelBuilder.Entity("MusicSystem.Models.ListenerList", b =>
                {
                    b.Navigation("ListenerListPodcasts");
                });

            modelBuilder.Entity("MusicSystem.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("MusicSystem.Models.Episode", b =>
                {
                    b.Navigation("GuestArtists");
                });

            modelBuilder.Entity("MusicSystem.Models.Song", b =>
                {
                    b.Navigation("PlaylistSongs");

                    b.Navigation("SongContributors");
                });

            modelBuilder.Entity("MusicSystem.Models.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicSystem.Models.Podcast", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("ListenerListPodcasts");

                    b.Navigation("MainCast");
                });
#pragma warning restore 612, 618
        }
    }
}
